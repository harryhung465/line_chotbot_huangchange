version: '3.7'
services:
  jupyter:
    image: abc1233108/darknet_sneaker
    container_name: line-chat-bot-jupyter 
    ports:
      - "5000:5000"
      - "8888:8888"
    volumes:
      - ./:/root/linechatbot
    tty: true
    stdin_open: true
    networks:
      - chatbot-net
#    command: start.sh jupyter notebook --NotebookApp.token=''

  ngrok:
    image: wernight/ngrok
    container_name: ngrok
    tty: true
    stdin_open: true
    ports:
      - "4040"
    networks:
      - chatbot-net
    command: ngrok http line-chat-bot-jupyter:5000
    depends_on:
      - jupyter
    links:
      - jupyter
  
#  serveo:
#    image: aeon33system/serveo-alpine:v1
#    container_name: chatbot_serveo
#    tty: true
#    stdin_open: true
#    networks:
#    - chatbot-net
#    command: autossh -M 0 -R harryyyy123.serveo.net:80:line-chat-bot-jupyter:5000 -o StrictHostKeyChecking=no serveo.net

  mysql:
    image: mariadb:10.1
    container_name: chatbot_db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./mysql_data:/var/lib/mysql
    networks:
      - chatbot-net
  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    volumes:
      - ./mongodb:/data/db
    restart: always
    networks:
      - chatbot-net
    expose:
      - 6016
    ports:
      - "27017:27017"

  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    hostname: adminmongo
    networks:
      - chatbot-net
    ports:
      - "1234:1234"
    environment:
      - HOST=0.0.0.0

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - chatbot-net
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.11-0.11.0.3
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      - chatbot-net
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092 #PLAINTEXT://[Cloud.Plateform.outer.ip]:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka:/kafka

  restproxy:
    image: confluentinc/cp-kafka-rest:5.2.1
    restart: always
    container_name: restproxy
    hostname: restproxy
    depends_on:
      - kafka
    networks:
      - chatbot-net
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_DEBUG: "true"
    ports:
      - 8082:8082
  ksql-server:
    image: confluentinc/cp-ksql-server:5.2.1
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    networks:
      - chatbot-net
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.2.1
    container_name: ksql-cli
    depends_on:
      - kafka
      - ksql-server
    networks:
      - chatbot-net
    entrypoint: /bin/sh
    tty: true

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    networks:
      - chatbot-net
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
  
  redis:
    image: redis:5.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:  
      - chatbot-net
    command: redis-server --requirepass "123456" --appendonly "yes"

networks:
  chatbot-net:
    
